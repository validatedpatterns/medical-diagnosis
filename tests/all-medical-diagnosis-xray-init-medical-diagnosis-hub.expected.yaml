---
# Source: xray-init/templates/objectstore-user/cm-create-s3-secret.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: create-s3-secret
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  create-s3-secret.sh: |
    #!/bin/bash
    oc create secret generic s3-secret-bck -n xraylab-1 --from-literal=AWS_ACCESS_KEY_ID=$(oc extract -n openshift-storage secret/rook-ceph-object-user-ocs-storagecluster-cephobjectstore-xraylab-1 --keys=AccessKey --to=-) --from-literal=AWS_SECRET_ACCESS_KEY=$(oc extract -n openshift-storage secret/rook-ceph-object-user-ocs-storagecluster-cephobjectstore-xraylab-1 --keys=SecretKey --to=-)
---
# Source: xray-init/templates/objectstore-user/cm-wait-for-objectstore.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: wait-for-objectstore
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  wait-for-objectstore.sh: |
    #!/bin/bash
    # Get ODF version
    ODFMINV=$(oc get subs -n openshift-storage odf-operator -o jsonpath='{.status.currentCSV}' | cut -d '.' -f3 )
    if [[ ${ODFMINV} -lt 13 ]]
      then
        oc wait --for=jsonpath='{.status.phase}'=Connected cephobjectstore/ocs-storagecluster-cephobjectstore -n openshift-storage --timeout=100s
      else
        oc wait --for=jsonpath='{.status.phase}'=Ready cephobjectstore/ocs-storagecluster-cephobjectstore -n openshift-storage --timeout=100s
    fi
---
# Source: xray-init/templates/s3-bucket-init/cm-s3-bucket-init.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: bucket-init
  namespace: 'xraylab-1'
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  bucket-init.py: |
    import os
    import boto3
    import json
    import botocore
    import argparse

    namespace = 'xraylab-1'
    bucket_base_name = 'xray-source'
    aws_access_key_id = os.environ['AWS_ACCESS_KEY_ID']
    aws_secret_access_key = os.environ['AWS_SECRET_ACCESS_KEY']
    endpoint_url = 'http://rook-ceph-rgw-ocs-storagecluster-cephobjectstore.openshift-storage.svc.cluster.local'

    s3 = boto3.client('s3',
                    endpoint_url = endpoint_url,
                    aws_access_key_id = aws_access_key_id,
                    aws_secret_access_key = aws_secret_access_key,
                    region_name = 'default',
                    config=botocore.client.Config(signature_version = 's3'))

    sns = boto3.client('sns',
                    endpoint_url = endpoint_url,
                    aws_access_key_id = aws_access_key_id,
                    aws_secret_access_key= aws_secret_access_key,
                    region_name='default',
                    config=botocore.client.Config(signature_version = 's3'))

    def create_bucket(bucket_name):
        result = s3.create_bucket(Bucket=bucket_name)
        return result

    create_bucket(bucket_base_name)
    create_bucket(bucket_base_name+'-processed')
    create_bucket(bucket_base_name+'-anonymized')

    for bucket in s3.list_buckets()['Buckets']:
        bucket_policy = {
                        "Version":"2012-10-17",
                        "Statement":[
                            {
                            "Sid":"AddPerm",
                            "Effect":"Allow",
                            "Principal": "*",
                            "Action":["s3:GetObject"],
                            "Resource":["arn:aws:s3:::{0}/*".format(bucket['Name'])]
                            }
                        ]
                        }
        bucket_policy = json.dumps(bucket_policy)
        s3.put_bucket_policy(Bucket=bucket['Name'], Policy=bucket_policy)

    attributes = {}
    attributes['push-endpoint'] = 'kafka://'+ 'xray-cluster-kafka-bootstrap.xraylab-1.svc:9092'
    attributes['kafka-ack-level'] = 'broker'

    def create_topic(topic):
        topic_arn = sns.create_topic(Name=topic, Attributes=attributes)['TopicArn']
        return topic_arn

    create_topic('xray-images')

    bucket_notifications_configuration = {
                "TopicConfigurations": [
                    {
                        "Id": 'xray-images',
                        "TopicArn": 'arn:aws:sns:s3a::xray-images',
                        "Events": ["s3:ObjectCreated:*"]
                    }
                ]
            }

    s3.put_bucket_notification_configuration(Bucket = bucket_base_name,
            NotificationConfiguration=bucket_notifications_configuration)
---
# Source: xray-init/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: view-odf-storageclusters
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
rules:
  - apiGroups:
      - ocs.openshift.io
    resources:
      - storageclusters
    verbs:
      - get
      - list
      - watch
---
# Source: xray-init/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: view-odf-cephobjectstores
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
rules:
  - apiGroups:
      - ceph.rook.io
    resources:
      - cephobjectstores
    verbs:
      - get
      - list
      - watch
---
# Source: xray-init/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: view-odf-subs
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
rules:
  - apiGroups:
      - operators.coreos.com
    resources:
      - subs
      - subscriptions
    verbs:
      - get
      - list
      - watch
---
# Source: xray-init/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: view-odf-objectstoreusers
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
rules:
  - apiGroups:
      - ceph.rook.io
    resources:
      - cephobjectstoreusers
    verbs:
      - get
      - list
      - watch
---
# Source: xray-init/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: read-objectstore-secret
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - "get"
      - "list"
      - "watch"
---
# Source: xray-init/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: read-objectstore-secret
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
subjects:
- kind: ServiceAccount
  name: xraylab-1-sa
  namespace: xraylab-1
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: read-objectstore-secret
  apiGroup: rbac.authorization.k8s.io
---
# Source: xray-init/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: view-odf-subs-rb
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
subjects:
- kind: ServiceAccount
  name: xraylab-1-sa
  namespace: xraylab-1
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: view-odf-subs
  apiGroup: rbac.authorization.k8s.io
---
# Source: xray-init/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: view-odf-storageclusters
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
subjects:
- kind: ServiceAccount
  name: xraylab-1-sa
  namespace: xraylab-1
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: view-odf-storageclusters
  apiGroup: rbac.authorization.k8s.io
---
# Source: xray-init/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: view-odf-cephobjectstores
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
subjects:
- kind: ServiceAccount
  name: xraylab-1-sa
  namespace: xraylab-1
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: view-odf-cephobjectstores
  apiGroup: rbac.authorization.k8s.io
---
# Source: xray-init/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: view-odf-objectstoreusers
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
subjects:
- kind: ServiceAccount
  name: xraylab-1-sa
  namespace: xraylab-1
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: view-odf-objectstoreusers
  apiGroup: rbac.authorization.k8s.io
---
# Source: xray-init/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: create-pattern-secret
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
rules:
  - apiGroups:
      - ""
    resources:
      - "secrets"
    verbs:
      - "create"
      - "watch"
      - "update"
      - "patch"
      - "delete"
---
# Source: xray-init/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: view-pattern-jobs
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
rules:
  - apiGroups:
      - batch
    resources:
      - "jobs"
    verbs:
      - "get"
      - "list"
      - "watch"
---
# Source: xray-init/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-pattern-secret
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
subjects:
- kind: ServiceAccount
  name: xraylab-1-sa
  namespace: xraylab-1
  apiGroup: ""
roleRef:
  kind: Role
  name: create-pattern-secret
  apiGroup: rbac.authorization.k8s.io
---
# Source: xray-init/templates/rbac/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: view-pattern-jobs
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-15"
subjects:
- kind: ServiceAccount
  name: xraylab-1-sa
  namespace: xraylab-1
  apiGroup: ""
roleRef:
  kind: Role
  name: view-pattern-jobs
  apiGroup: rbac.authorization.k8s.io
---
# Source: xray-init/templates/riskAssessment/kafkaservice.yaml
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: risk-assessment
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/sync-wave: "20"
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  template:
    metadata:
        annotations:
          autoscaling.knative.dev/target: '1'
          revisionTimestamp: ''
    spec:
      containers:
      - image: quay.io/rh-data-services/xraylab-risk-assessment:latest
        ports:
        - containerPort: 5000
        env:
        - name: model_version
          value: 'v1'
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: s3-secret-bck
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: s3-secret-bck
              key: AWS_SECRET_ACCESS_KEY
        - name: service_point
          valueFrom:
            configMapKeyRef:
              name: service-point
              key: url
        - name: database-user
          valueFrom:
            secretKeyRef:
              name: db-secret
              key:  database-user
        - name: database-password
          valueFrom:
            secretKeyRef:
              name: db-secret
              key:  database-password
        - name: database-host
          valueFrom:
            secretKeyRef:
              name: db-secret
              key:  database-host
        - name: database-db
          valueFrom:
            secretKeyRef:
              name: db-secret
              key:  database-db
        - name: bucket-base-name
          valueFrom:
            configMapKeyRef:
              name: buckets-config
              key: bucket-base-name
        resources:
          limits:
            cpu: '2'
            memory: 500M
          requests:
            cpu: 400m
            memory: 100M
---
# Source: xray-init/templates/objectstore-user/job-cephobjstore-wait.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-1"
  name: job-odf-cephobjectstore-complete
  namespace: xraylab-1
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
           '/tmp/wait-for-objectstore.sh'
        name: wait-odf-cephobjectstore-complete
        volumeMounts:
          - mountPath: /tmp/wait-for-objectstore.sh
            name: wait-for-objectstore
            subPath: wait-for-objectstore.sh
      volumes:
        - name: wait-for-objectstore
          configMap:
            name: wait-for-objectstore
            defaultMode: 0755
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: xraylab-1-sa
      serviceAccountName: xraylab-1-sa
      terminationGracePeriodSeconds: 60
---
# Source: xray-init/templates/objectstore-user/job-cephobjstoreuser-wait.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "5"
  name: job-wait-for-object-user-creation
  namespace: xraylab-1
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
          oc wait --for=jsonpath='{.status.phase}'=Ready cephobjectstoreuser/xraylab-1 -n openshift-storage --timeout=900s
        name: wait-for-object-user-creation
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: xraylab-1-sa
      serviceAccountName: xraylab-1-sa
      terminationGracePeriodSeconds: 60
---
# Source: xray-init/templates/objectstore-user/job-create-s3-secret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "10"
  name: create-s3-secret
  namespace: xraylab-1
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
          oc wait --for=condition=complete job/job-odf-storagecluster-complete --timeout=600s
          '/tmp/create-s3-secret.sh'
        name: create-s3-secret
        volumeMounts:
          - mountPath: /tmp/create-s3-secret.sh
            name: create-s3-secret
            subPath: create-s3-secret.sh
      volumes:
        - name: create-s3-secret
          configMap:
            name: create-s3-secret
            defaultMode: 0755
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: xraylab-1-sa
      serviceAccountName: xraylab-1-sa
      terminationGracePeriodSeconds: 400
---
# Source: xray-init/templates/objectstore-user/job-storageCluster-wait.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: job-odf-storagecluster-complete
  namespace: xraylab-1
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
          oc wait --for=condition=Available=true storagecluster/ocs-storagecluster -n openshift-storage --timeout=900s
        name: wait-odf-storagecluster-complete
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: xraylab-1-sa
      serviceAccountName: xraylab-1-sa
      terminationGracePeriodSeconds: 60
---
# Source: xray-init/templates/riskAssessment/job-wait-for-bucket-init.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "16"
  name: job-riskassessment-wait-for-rgw-bucket-init
  namespace: xraylab-1
spec:
  template:
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        command:
        - /bin/bash
        - -c
        - |
          oc wait --for=condition=complete job/bucket-init --timeout=1200s
        name: riskassessment-wait-for-rgw-bucket-init
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      activeDeadlineSeconds: 1200
      serviceAccount: xraylab-1-sa
      serviceAccountName: xraylab-1-sa
      terminationGracePeriodSeconds: 60
---
# Source: xray-init/templates/s3-bucket-init/job-s3-bucket-init.yaml
kind: Job
apiVersion: batch/v1
metadata:
  name: bucket-init
  namespace: 'xraylab-1'
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "15"
spec:
  template:
    metadata:
      name: bucket-init
    spec:
      containers:
        - name: bucket-init
          image: quay.io/thoth-station/s2i-generic-data-science-notebook:v0.0.4
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: s3-secret-bck
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-secret-bck
                  key: AWS_SECRET_ACCESS_KEY
          volumeMounts:
            - mountPath: /opt/app-root/src/bucket-init.py
              name: bucket-init
              subPath: bucket-init.py
          command:
            - python
            - '/opt/app-root/src/bucket-init.py'
      volumes:
        - name: bucket-init
          configMap:
            name: bucket-init
      dnsPolicy: ClusterFirst
      activeDeadlineSeconds: 900
      restartPolicy: Never
      serviceAccount: xraylab-1-sa
      serviceAccountName: xraylab-1-sa
      terminationGracePeriodSeconds: 60
---
# Source: xray-init/templates/objectstore-user/cephObjectStoreUser.yaml
apiVersion: ceph.rook.io/v1
kind: CephObjectStoreUser
metadata:
  name: xraylab-1
  namespace: openshift-storage
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "1"
spec:
  store: ocs-storagecluster-cephobjectstore
  displayName: XRaylab-1 RGW User
---
# Source: xray-init/templates/riskAssessment/riskassessment-is.yaml
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: risk-assessment
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  lookupPolicy:
    local: true
  tags:
    - name: latest
      from:
        kind: DockerImage
        name: quay.io/rh-data-services/xraylab-risk-assessment:latest
      importPolicy: {}
      referencePolicy:
        type: Source
---
# Source: xray-init/templates/riskAssessment/kafkaSource.yaml
apiVersion: sources.knative.dev/v1beta1
kind: KafkaSource
metadata:
  name: xray-images
  namespace: xraylab-1
  annotations:
    argocd.argoproj.io/sync-options: Validate=false, SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "21"
    argocd.argoproj.io/compare-options: IgnoreExtraneous
spec:
  consumerGroup: risk-assessment
  bootstrapServers:
    - xray-cluster-kafka-bootstrap.xraylab-1.svc:9092
  topics:
    - xray-images
  sink:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: risk-assessment
